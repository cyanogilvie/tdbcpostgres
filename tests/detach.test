# tdbcpostgres.test --
#
#	Tests for the tdbc::postgres bridge
#
# Copyright (c) 2008 by Slawomir Cygan
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
#
#------------------------------------------------------------------------------

package require tcltest 2.2
namespace import -force ::tcltest::*
loadTestedCommands
package require tdbc::postgres

# We need to know the parameters of the Postgre database for testing.

set connFlags {}
if {[info exists ::env(TDBCPOSTGRES_TEST_HOST)]} {
    lappend connFlags -host $::env(TDBCPOSTGRES_TEST_HOST)
}
if {[info exists ::env(TDBCPOSTGRES_TEST_USER)]} {
    lappend connFlags -user $::env(TDBCPOSTGRES_TEST_USER)
}
if {[info exists ::env(TDBCPOSTGRES_TEST_PASSWD)]} {
    lappend connFlags -password $::env(TDBCPOSTGRES_TEST_PASSWD)
}
if {[info exists ::env(TDBCPOSTGRES_TEST_DB)]} {
    lappend connFlags -db $::env(TDBCPOSTGRES_TEST_DB)
    tcltest::testConstraint connect 1
} else {
    tcltest::testConstraint connect 0
}
if {[info exists ::env(TDBCPOSTGRES_TEST_PORT)]} {
    lappend connFlags -port $::env(TDBCPOSTGRES_TEST_PORT)
}

#------------------------------------------------------------------------------
#
# The tests that follow all require a connection to a database.

if {![tcltest::testConstraint connect]} {
    puts "tests requiring a db connection skipped."
    cleanupTests
    return
}

test detach-1.0 {Detach method, too many args} {*}{
    -setup {
	tdbc::postgres::connection create ::db {*}$connFlags
    }
    -body {
	list [catch {::db detach foo} r o] $r [dict get $o -errorcode]
    }
    -cleanup {
	unset -nocomplain r o
	rename ::db {}
    }
    -result {1 {wrong # args: should be "::db detach "} {TCL WRONGARGS}}
}

test detach-1.1 {Detach and re-attach, same interp, same thread} {*}{
    -setup {
	tdbc::postgres::connection create ::db_detach-1.1a {*}$connFlags
    }
    -body {
	set detachedhandle	[::db_detach-1.1a detach]
	set res			[info object isa object ::db_detach-1.1a]
	tdbc::postgres::connection create ::db_detach-1.1b -attach $detachedhandle
	lappend res		[info object isa object ::db_detach-1.1b]

	set res
    }
    -cleanup {
	unset -nocomplain detachedhandle res
	if {[info object isa object ::db_detach-1.1a]} { rename ::db_detach-1.1a {} }
	if {[info object isa object ::db_detach-1.1b]} { rename ::db_detach-1.1b {} }
    }
    -result {0 1}
}

test detach-1.2 {Detach and re-attach, test revived connection, same interp, same thread} {*}{
    -setup {
	tdbc::postgres::connection create ::db {*}$connFlags
	::db allrows {drop table if exists people}
	::db allrows {create table people (idnum integer, name varchar(40), info text)}
	tdbc::postgres::connection create ::db_detach-1.2a {*}$connFlags
    }
    -body {
	::db_detach-1.2a allrows {insert into people (idnum, name, info) values (1234, 'Test detach-1.2', NULL)}
	set detachedhandle	[::db_detach-1.2a detach]
	set res			[info object isa object ::db_detach-1.2a]
	tdbc::postgres::connection create ::db_detach-1.2b -attach $detachedhandle
	lappend res		[info object isa object ::db_detach-1.2b]
	lappend res		[lindex [::db_detach-1.2b allrows -as lists {select name from people}] 0 0]

	set res
    }
    -cleanup {
	unset -nocomplain detachedhandle res
	if {[info object isa object ::db_detach-1.2a]} { rename ::db_detach-1.2a {} }
	if {[info object isa object ::db_detach-1.2b]} { rename ::db_detach-1.2b {} }
	::db allrows {drop table if exists people}
	rename ::db {}
    }
    -result {0 1 {Test detach-1.2}}
}

test detach-2.0 {Connected method, too many args} {*}{
    -setup {
	tdbc::postgres::connection create ::db {*}$connFlags
    }
    -body {
	list [catch {::db connected foo} r o] $r [dict get $o -errorcode]
    }
    -cleanup {
	unset -nocomplain r o
	rename ::db {}
    }
    -result {1 {wrong # args: should be "::db connected "} {TCL WRONGARGS}}
}

test detach-2.1 {Connected method} {*}{
    -setup {
	tdbc::postgres::connection create ::db {*}$connFlags
	tdbc::postgres::connection create ::db_detach-2.1 {*}$connFlags
	set nonce	detach-2.1_[expr {rand()*(2**32)}]
	set mypid	[lindex [::db_detach-2.1 allrows -as lists "select pid,'$nonce' as nonce from pg_stat_activity where query like 'select pid,''$nonce'' as nonce from pg_stat_activity where query like %'"] 0 0]
    }
    -body {
	set res	{}
	lappend res [::db_detach-2.1 connected]
	lappend res [::db allrows -as lists {select pg_terminate_backend(:mypid)}]
	lappend res [::db_detach-2.1 connected]
	lappend res [::db_detach-2.1 connected]	;# Second call should take the PQstatus != CONNECTION_OK branch
	set res
    }
    -cleanup {
	if {[info object isa object ::db_detach-2.1]} { rename ::db_detach-2.1 {} }
	unset -nocomplain mypid nonce res
	rename ::db {}
    }
    -result {1 t 0 0}
}

test detach-3.1 {Detach with statements associated} {*}{
    -setup {
	tdbc::postgres::connection create ::db_detach-3.1a {*}$connFlags
    }
    -body {
	set res {}
	set first	[lindex [time {
	    set stmt	[::db_detach-3.1a prepare {select 'prepared'}]
	}] 0]
	lappend res	[info object isa object $stmt]
	lappend res	[$stmt allrows -as lists]
	set detachedhandle	[::db_detach-3.1a detach]
	lappend res	[info object isa object ::db_detach-3.1a]
	tdbc::postgres::connection create ::db_detach-3.1b -attach $detachedhandle
	lappend res	[info object isa object $stmt]
	set second	[lindex [time {
	    set stmt	[::db_detach-3.1b prepare {select 'prepared'}]
	}] 0]
	lappend res	[$stmt allrows -as lists]

	puts "first: $first, second: $second"
	lappend res [expr {
	    $second < $first / 4
	    	? "faster"
		: "First prepare: $first, second: $second"
	}]
	set res
    }
    -cleanup {
	unset -nocomplain detachedhandle res first second
	if {[info object isa object ::db_detach-3.1a]} { rename ::db_detach-3.1a {} }
	if {[info object isa object ::db_detach-3.1b]} { rename ::db_detach-3.1b {} }
    }
    -result {1 prepared 0 0 prepared faster}
}

test detach-3.2 {Refreeze, statements preserved} {*}{
    -setup {
	tdbc::postgres::connection create ::db_detach-3.1a {*}$connFlags
    }
    -body {
	set res {}
	set first	[lindex [time {
	    set stmt	[::db_detach-3.1a prepare {select 'prepared'}]
	}] 0]
	lappend res	[info object isa object $stmt]
	lappend res	[$stmt allrows -as lists]
	set detachedhandle	[::db_detach-3.1a detach]
	lappend res	[info object isa object ::db_detach-3.1a]
	
	tdbc::postgres::connection create ::db_detach-3.1b -attach $detachedhandle
	set detachedhandle	[::db_detach-3.1b detach]

	tdbc::postgres::connection create ::db_detach-3.1c -attach $detachedhandle
	lappend res	[info object isa object $stmt]
	set second	[lindex [time {
	    set stmt	[::db_detach-3.1c prepare {select 'prepared'}]
	}] 0]
	lappend res	[$stmt allrows -as lists]

	puts "first: $first, second: $second"
	lappend res [expr {
	    $second < $first / 4
	    	? "faster"
		: "First prepare: $first, second: $second"
	}]
	set res
    }
    -cleanup {
	unset -nocomplain detachedhandle res first second
	if {[info object isa object ::db_detach-3.1a]} { rename ::db_detach-3.1a {} }
	if {[info object isa object ::db_detach-3.1b]} { rename ::db_detach-3.1b {} }
	if {[info object isa object ::db_detach-3.1c]} { rename ::db_detach-3.1c {} }
    }
    -result {1 prepared 0 0 prepared faster}
}

test detach-3.4 {Refreeze, pgStatements preserved} {*}{
    -setup {
	tdbc::postgres::connection create ::db_detach-3.1a {*}$connFlags
    }
    -body {
	set res {}
	set first	[lindex [time {
	    lappend res [::db_detach-3.1a allrows -as lists {select 'prepared'}]
	}] 0]
	set detachedhandle	[::db_detach-3.1a detach]
	lappend res	[info object isa object ::db_detach-3.1a]
	
	tdbc::postgres::connection create ::db_detach-3.1b -attach $detachedhandle
	set detachedhandle	[::db_detach-3.1b detach]

	tdbc::postgres::connection create ::db_detach-3.1c -attach $detachedhandle
	set second	[lindex [time {
	    lappend res [::db_detach-3.1c allrows -as lists {select 'prepared'}]
	}] 0]

	puts "first: $first, second: $second"
	lappend res [expr {
	    $second < $first / 2
	    	? "faster"
		: "First prepare: $first, second: $second"
	}]
	set res
    }
    -cleanup {
	unset -nocomplain detachedhandle res first second
	if {[info object isa object ::db_detach-3.1a]} { rename ::db_detach-3.1a {} }
	if {[info object isa object ::db_detach-3.1b]} { rename ::db_detach-3.1b {} }
	if {[info object isa object ::db_detach-3.1c]} { rename ::db_detach-3.1c {} }
    }
    -result {prepared 0 prepared faster}
}

test detach-4.1 {pgStatementType caching} {*}{
    -setup {
	tdbc::postgres::connection create ::db_detach-4.1a {*}$connFlags
    }
    -body {
	set res {}
	set sql	{select 'prepared 60.1'}
	set first	[lindex [time {
	    set stmt	[::db_detach-4.1a prepare $sql]
	}] 0]
	$stmt destroy
	set second	[lindex [time {
	    set stmt	[::db_detach-4.1a prepare $sql]
	}] 0]
	$stmt destroy
	set dup		[lindex [time {
	    set stmt	[::db_detach-4.1a prepare {select 'prepared 60.1'}]
	}] 0]
	lappend res	[lindex [$stmt allrows -as lists] 0 0]
	$stmt destroy
	set detachedhandle	[::db_detach-4.1a detach]
	lappend res	[info object isa object ::db_detach-4.1a]
	tdbc::postgres::connection create ::db_detach-4.1b -attach $detachedhandle
	set resumed	[lindex [time {
	    set stmt	[::db_detach-4.1b prepare $sql]
	    #::db_detach-4.1b allrows -as lists $sql
	}] 0]
	#puts "first: $first\nsecond: $second\ndup: $dup\nresumed: $resumed"
	lappend res	[lindex [$stmt allrows -as lists] 0 0]
	$stmt destroy

	set res
    }
    -cleanup {
	unset -nocomplain detachedhandle res first second dup resumed
	if {[info object isa object ::db_detach-4.1a]} { rename ::db_detach-4.1a {} }
	if {[info object isa object ::db_detach-4.1b]} { rename ::db_detach-4.1b {} }
    }
    -result {{prepared 60.1} 0 {prepared 60.1}}
}

cleanupTests
return

# Local Variables:
# mode: tcl
# End:
# vim: ft=tcl
